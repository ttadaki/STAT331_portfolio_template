---
title: "STAT 331 Portfolio"
author: "Trenton Tadaki"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from a Lab or Challenge assignment where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r wd-1-csv}
#Lab 2 Set-up

surveys <- read_csv(here("Week 2", "Lab 2", "surveys.csv"))
```

-   `xlsx`

```{r wd-1-xlsx}
#Practice Activity 3 Q1

military <- read_xlsx(here::here("data",                              "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip = 7, 
                      nmax = 190)
```

-   `txt`

```{r wd-1-txt}
#Practice Activity 5.2 Set-up

message <- read_csv(here::here("Week 5", 
                                 "Practice Activity 5.2", 
                                 "scrambled_message.txt")
                      )
```

**WD-2: I can select necessary columns from a dataset.**

```{r wd-2}
#Challenge 4

avocado_new <- avocado_clean |>
  semi_join(y = cali_regions, by = 'region') |>
  mutate('Avo_sales_USD' = AveragePrice * `Total Volume`,
         'Date' = as.Date(Date),
         'month' = floor_date(Date, 'month')) |>
  select(month, Avo_sales_USD, region) |>
  group_by(region, month) |>
  summarise(Avo_sales_USD = sum(Avo_sales_USD))
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r wd-3-numeric}
#Lab 3 Q11

hiphop_clean |>
  filter(age < 20) |>
  group_by(word) |>
  summarize(mean_fam = mean(as.numeric(familiarity))) |>
  slice_max(mean_fam)
```

-   character -- specifically a string

```{r wd-3-string}
#Lab 3 Q12

hiphop_clean |>
  filter(ethnic == 'non-white',
         sex == 'Female') |>
  group_by(word) |>
  summarize(mean_fam = mean(as.numeric(familiarity))) |>
  slice_min(mean_fam)
```

-   factor

```{r wd-3-factor}
#Lab 5 Time Series Plot Q3

week_day_end <- 
  fct_collapse(rodent_data$days_of_week, 
               "Weekday" = c("Mon", 
                             "Tue", 
                             "Wed", 
                             "Thu", 
                             "Fri"), 
               "Weekend" = c("Sat", 
                             "Sun"))

ggplot(data = rodent_data, mapping = aes(x = week_day_end)) +
  geom_bar(mapping = aes(fill = days_of_week)) +
  scale_fill_brewer(palette = "Accent") |>
  labs(title = "Rodents Captured (Weekend vs Weekdays)", x = "") +
  theme_grey(base_size = 10)
```

-   date

```{r wd-3-date}
#Challenge 4

avocado_new <- avocado_clean |>
  semi_join(y = cali_regions, by = 'region') |>
  mutate('Avo_sales_USD' = AveragePrice * `Total Volume`,
         'Date' = as.Date(Date),
         'month' = floor_date(Date, 'month')) |>
  select(month, Avo_sales_USD, region) |>
  group_by(region, month) |>
  summarise(Avo_sales_USD = sum(Avo_sales_USD))
  

housing_prices <- housing_prices_og |>
  pivot_longer("2015-01-31" : "2018-03-31",
             names_to = "Date",
             values_to = "Avg_house_price") |>
  filter(State == "CA") |>
  mutate('region' =
           str_replace(RegionName,
                       " ", 
                       ""),
         'Date' = as.Date(Date),
         'month' = floor_date(Date, 'month')) |>
  select(region, month, Avg_house_price) |>
  right_join(cali_regions) |>
  drop_na()
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r wd-4-numeric}
#Challenge 4

avocado_new <- avocado_clean |>
  semi_join(y = cali_regions, by = 'region') |>
  mutate('Avo_sales_USD' = AveragePrice * `Total Volume`,
         'Date' = as.Date(Date),
         'month' = floor_date(Date, 'month')) |>
  select(month, Avo_sales_USD, region) |>
  group_by(region, month) |>
  summarise(Avo_sales_USD = sum(Avo_sales_USD))

housing_prices <- housing_prices_og |>
  pivot_longer("2015-01-31" : "2018-03-31",
             names_to = "Date",
             values_to = "Avg_house_price") |>
  filter(State == "CA") |>
  mutate('region' =
           str_replace(RegionName,
                       " ", 
                       ""),
         'Date' = as.Date(Date),
         'month' = floor_date(Date, 'month')) |>
  select(region, month, Avg_house_price) |>
  right_join(cali_regions) |>
  drop_na() 

avo_house <- housing_prices |>
  full_join(avocado_new, by = c('region', 'month'))

ggplot(data = avo_house) +
  geom_line(mapping = aes(x = month, y = Avg_house_price), color = "blue") +
  geom_line(mapping = aes(x = month, y = Avo_sales_USD), color = "red") +
  facet_wrap(~region, ncol = 2) +
  ylab('USD')
```

-   character -- specifically a string

```{r wd-4-string}
#Practice Activity 5.2 Q4

hiphop_clean <- hiphop_clean |>
  mutate(
    ethnic = if_else(ethnic == 'white',
                     'white',
                     'non-white'))
```

-   factor

```{r wd-4-factor}
#Lab 5 Time Series Plot Q1

rodent_data <- surveys |>
  filter(taxa == 'Rodent') |>
  mutate(days_of_week = factor(wday(date, label = TRUE), 
                               levels = c("Mon", 
                                          "Tue", 
                                          "Wed", 
                                          "Thu", 
                                          "Fri", 
                                          "Sat", 
                                          "Sun"))) |>
  group_by(days_of_week) |>
  na.omit()

```

-   date

```{r wd-4-date}
#Lab 5 Time-Series Plot Q3

genus_weight <- surveys |>
  group_by(genus) |>
  mutate(year = year(date)) |>
  na.omit()

ggplot(data = genus_weight, mapping = aes(x = year, y = weight)) +
  geom_line(mapping = aes(color = genus)) +
  labs(title = "Weight of Genus over time", y = "Weight in grams") +
  theme_grey(base_size = 10)

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r wd-5-left}
#Preview Activity 4.3 Q1

left_join(prof_info, prof_course)
```

-   `right_join()`

```{r wd-5-right}
#Challenge 4

housing_prices <- housing_prices_og |>
  pivot_longer("2015-01-31" : "2018-03-31",
             names_to = "Date",
             values_to = "Avg_house_price") |>
  filter(State == "CA") |>
  mutate('region' =
           str_replace(RegionName,
                       " ", 
                       ""),
         'Date' = as.Date(Date),
         'month' = floor_date(Date, 'month')) |>
  select(region, month, Avg_house_price) |>
  right_join(cali_regions) |>
  drop_na() 
```

-   `inner_join()`

```{r wd-5-inner}
#Preview Activity 4.3 Q1

inner_join(prof_info, prof_course)
```

-   `full_join()`

```{r wd-5-full}
#Challenge 4

avo_house <- housing_prices |>
  full_join(avocado_new, by = c('region', 'month'))
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r wd-6-semi}
#Lab 4 Q3

avocado_clean |>
  semi_join(y = regions_major, by = 'region') |>
  filter(year == 2017,
         type == "organic") |>
  group_by(region) |>
  summarise(sum_sm_med = sum(`Small_Medium`)) |>
  slice_max(sum_sm_med)
```

-   `anti_join()`

```{r wd-6-anti}
#Lab 4 Q5

top5metro <- avocado_clean |>
  anti_join(y = regions_other, by = 'region')|>
  group_by(region) |>
  summarise(mean_vol = mean(`Total Volume`)) |>
  arrange(desc(mean_vol)) |>
  slice(1:5)
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r wd-7-long}
#Lab 4 Q7

avocado_cali_size <- avocado_cali |>
  select(c('Small_Medium',
           'Large', 
           'Extra Large', 
           'type', 
           'region')) |>
  pivot_longer(Small_Medium : `Extra Large`,
               names_to = "Size",
               values_to = "Volume") |>
  group_by(region, 
           Size,
           type) |>
  summarise(volume_sold = sum(Volume)) 
```

-   `pivot_wider()`

```{r wd-7-wide}
#Lab 4 Q6

avocado_price_diff <- avocado_avg |>
  pivot_wider(names_from = type, values_from = mean_price) |>
  mutate(price_diff = organic - conventional)
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

**R-2: I can write well documented and tidy code.**

-   Example 1

```{r r-2-1}
#Lab 4 Cleaning the Data

avocado_clean <- avocado |>
  rename("Small_Medium" = "4046", 
         "Large" = "4225",
         "Extra Large" = "4770")

regions_major <- tibble(region 
                        = c("West",
                            "Plains", 
                            "Northeast",
                            "Southeast",
                            "SouthCentral",
                            "Midsouth",
                            "WestTexNewMexico",
                            "NortherNewEngland"))

regions_other <- tibble(region = c("California",
                                  "SouthCarolina",
                                  "GreatLakes",
                                  "TotalUS"))
```

-   Example 2

```{r r-2-2}
#Lab 4 Q7

avocado_cali_size <- avocado_cali |>
  select(c('Small_Medium',
           'Large', 
           'Extra Large', 
           'type', 
           'region')) |>
  pivot_longer(Small_Medium : `Extra Large`,
               names_to = "Size",
               values_to = "Volume") |>
  group_by(region, 
           Size,
           type) |>
  summarise(volume_sold = sum(Volume)) 
  
ggplot(data = avocado_cali_size, 
       mapping = aes(x = region,
                     y = volume_sold,
                     fill = Size)) +
  geom_col(position = "fill") +
  facet_wrap(. ~ type) +
  scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
  labs(x = "Region of CA",
       y = "Proportion of Mean Avocados Sold") +
  theme_grey(base_size = 14)
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example 1

```{r r-3-1}
#Lab 4 Q7

avocado_cali_size <- avocado_cali |>
  select(c('Small_Medium',
           'Large', 
           'Extra Large', 
           'type', 
           'region')) |>
  pivot_longer(Small_Medium : `Extra Large`,
               names_to = "Size",
               values_to = "Volume") |>
  group_by(region, 
           Size,
           type) |>
  summarise(volume_sold = sum(Volume)) 
  
ggplot(data = avocado_cali_size, 
       mapping = aes(x = region,
                     y = volume_sold,
                     fill = Size)) +
  geom_col(position = "fill") +
  facet_wrap(. ~ type) +
  scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
  labs(x = "Region of CA",
       y = "Proportion of Mean Avocados Sold") +
  theme_grey(base_size = 14)
```

-   Example 2

```{r r-3-2}
#Lab 2 Q13

ggplot(data = surveys, mapping = aes(x = species, y = weight)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(alpha = 0.1, color = 'cadetblue') +
  labs(x = 'Species of Animal', y = 'Weight in grams') +
  scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
  theme_grey(base_size = 9)
```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   numeric variables

```{r dvs-1-num}
#Lab 2 Q6

ggplot(data = surveys, mapping = aes(x = weight, y = hindfoot_length)) +
  geom_jitter(alpha = 0.3)
```

-   numeric variables and categorical variables

```{r dvs-2-num-cat}
#Challenge 4

avocado_new <- avocado_clean |>
  semi_join(y = cali_regions, by = 'region') |>
  mutate('Avo_sales_USD' = AveragePrice * `Total Volume`,
         'Date' = as.Date(Date),
         'month' = floor_date(Date, 'month')) |>
  select(month, Avo_sales_USD, region) |>
  group_by(region, month) |>
  summarise(Avo_sales_USD = sum(Avo_sales_USD))

housing_prices <- housing_prices_og |>
  pivot_longer("2015-01-31" : "2018-03-31",
             names_to = "Date",
             values_to = "Avg_house_price") |>
  filter(State == "CA") |>
  mutate('region' =
           str_replace(RegionName,
                       " ", 
                       ""),
         'Date' = as.Date(Date),
         'month' = floor_date(Date, 'month')) |>
  select(region, month, Avg_house_price) |>
  right_join(cali_regions) |>
  drop_na() 

avo_house <- housing_prices |>
  full_join(avocado_new, by = c('region', 'month'))

ggplot(data = avo_house) +
  geom_line(mapping = aes(x = month, y = Avg_house_price), color = "blue") +
  geom_line(mapping = aes(x = month, y = Avo_sales_USD), color = "red") +
  facet_wrap(~region, ncol = 2) +
  ylab('USD')
```

-   categorical variables

```{r dvs-2-cat}
#Lab 2 Q4

ggplot(data = surveys, mapping = aes(x = species, y = weight)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(alpha = 0.1, color = 'cadetblue') +
  labs(title = 'Question 12') +
  scale_x_discrete(guide = guide_axis(n.dodge = 2))
```

-   dates

```{r dvs-2-date}
#Lab 5 Time-Series Q3

genus_weight <- surveys |>
  group_by(genus) |>
  mutate(year = year(date)) |>
  na.omit()

ggplot(data = genus_weight, mapping = aes(x = year, y = weight)) +
  geom_line(mapping = aes(color = genus)) +
  labs(title = "Weight of Genus over time", y = "Weight in grams") +
  theme_grey(base_size = 10)
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   Example 1

```{r dvs-2-1}
#Lab 2 Q4

ggplot(data = surveys, mapping = aes(x = species, y = weight)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(alpha = 0.1, color = 'cadetblue') +
  labs(x = 'Species of Animal', y = 'Weight in grams') +
  scale_x_discrete(guide = guide_axis(n.dodge = 2))
```

-   Example 2

```{r dvs-2-2}
#Lab 4 Q5

top5metro <- avocado_clean |>
  anti_join(y = regions_other, by = 'region')|>
  group_by(region) |>
  summarise(mean_vol = mean(`Total Volume`)) |>
  arrange(desc(mean_vol)) |>
  slice(1:5)

avocado_clean |>
  semi_join(y = top5metro, by = 'region') |>
  ggplot(mapping = aes(x = region , y = `Total Volume`)) +
  geom_boxplot() +
  geom_jitter(alpha = 0.4, color = 'cadetblue') +
  labs(title = 'Total Volume of Avocado Sales for Top 5 Regions') +
  scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
  theme_grey(base_size = 14)
```

**DVS-3: I show creativity in my visualizations**

-   Example 1

```{r dvs-3-1}
#Lab 2 Q13

ggplot(data = surveys, mapping = aes(x = species, y = weight)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(alpha = 0.1, color = 'cadetblue') +
  labs(x = 'Species of Animal', y = 'Weight in grams') +
  scale_x_discrete(guide = guide_axis(n.dodge = 2))
```

-   Example 2

```{r dvs-3-2}
#Lab 5 Time Series Q5

week_day_end <- 
  fct_collapse(rodent_data$days_of_week, 
               "Weekday" = c("Mon", 
                             "Tue", 
                             "Wed", 
                             "Thu", 
                             "Fri"), 
               "Weekend" = c("Sat", 
                             "Sun"))

ggplot(data = rodent_data, mapping = aes(x = week_day_end)) +
  geom_bar(mapping = aes(fill = days_of_week)) +
  scale_fill_brewer(palette = "Accent") |>
  labs(title = "Rodents Captured (Weekend vs Weekdays)", x = "") +
  theme_grey(base_size = 10)
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example 1

```{r dvs-4-1}
#Lab 3 Q12

hiphop_clean |>
  filter(ethnic == 'non-white',
         sex == 'Female') |>
  group_by(word) |>
  summarize(mean_fam = mean(as.numeric(familiarity))) |>
  slice_min(mean_fam)

hiphop_clean |>
  filter(ethnic == 'non-white',
         sex == 'Female') |>
  group_by(word) |>
  summarize(mean_fam = mean(as.numeric(familiarity))) |>
  slice_max(mean_fam)
```

-   Example 2

```{r dvs-4-2}
#Lab 4 Q5

top5metro <- avocado_clean |>
  anti_join(y = regions_other, by = 'region')|>
  group_by(region) |>
  summarise(mean_vol = mean(`Total Volume`)) |>
  arrange(desc(mean_vol)) |>
  slice(1:5)

avocado_clean |>
  semi_join(y = top5metro, by = 'region') |>
  ggplot(mapping = aes(x = region , y = `Total Volume`)) +
  geom_boxplot() +
  geom_jitter(alpha = 0.4, color = 'cadetblue') +
  labs(title = 'Total Volume of Avocado Sales for Top 5 Regions') +
  scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
  theme_grey(base_size = 14)
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r dvs-5-1}
#Challenge 3

hiphop_artists <- hiphop_clean |>
  select(subj, sex, ethnic, intl:unclassifiable) |>
  distinct(subj, .keep_all = TRUE)

#Male versus Female
hiphop_artists |>
  group_by(sex) |>
  summarise(
    across(
      intl:unclassifiable, mean)) |>
  summarise(
    across(
      intl:unclassifiable, diff)) |>
  abs() |>
  which.max()

#White versus Non-white
hiphop_artists |>
  group_by(ethnic) |>
  summarise(
    across(
      intl:unclassifiable, mean)) |>
  summarise(
    across(
      intl:unclassifiable, diff))|>
  abs() |>
  which.max()
```

-   Example 2

```{r dvs-5-2}
#Lab 4 Q5

top5metro <- avocado_clean |>
  anti_join(y = regions_other, by = 'region')|>
  group_by(region) |>
  summarise(mean_vol = mean(`Total Volume`)) |>
  arrange(desc(mean_vol)) |>
  slice(1:5)

avocado_clean |>
  semi_join(y = top5metro, by = 'region') |>
  ggplot(mapping = aes(x = region , y = `Total Volume`)) +
  geom_boxplot() +
  geom_jitter(alpha = 0.4, color = 'cadetblue') +
  labs(title = 'Total Volume of Avocado Sales for Top 5 Regions') +
  scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
  theme_grey(base_size = 14)
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r dvs-6-1}
#Challenge 4

housing_prices <- housing_prices_og |>
  pivot_longer("2015-01-31" : "2018-03-31",
             names_to = "Date",
             values_to = "Avg_house_price") |>
  filter(State == "CA") |>
  mutate('region' =
           str_replace(RegionName,
                       " ", 
                       ""),
         'Date' = as.Date(Date),
         'month' = floor_date(Date, 'month')) |>
  select(region, month, Avg_house_price) |>
  right_join(cali_regions) |>
  drop_na()

avo_house <- housing_prices |>
  full_join(avocado_new, by = c('region', 'month'))
```

-   Example 2

```{r dvs-6-2}
#Lab 9 Q10

Aln_prop <- StateNames_A |>
  filter(Name %in% c('Allan', 'Alan', 'Allen'),
           Year == 2000,
           State %in% c('CA', 'PA')
         ) |>
  group_by(Name, State) |>
  summarize(total_count = sum(Count)) |>
  group_by(State) |>
  mutate(Prop = total_count / sum(total_count)) |>
  select(Name, State, Prop) |>
  pivot_wider(names_from = Name, values_from = Prop)
```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r dvs-7-1}
#Challenge 4

housing_prices <- housing_prices_og |>
  pivot_longer("2015-01-31" : "2018-03-31",
             names_to = "Date",
             values_to = "Avg_house_price") |>
  filter(State == "CA") |>
  mutate('region' =
           str_replace(RegionName,
                       " ", 
                       ""),
         'Date' = as.Date(Date),
         'month' = floor_date(Date, 'month')) |>
  select(region, month, Avg_house_price) |>
  right_join(cali_regions) |>
  drop_na() 

avo_house <- housing_prices |>
  full_join(avocado_new, by = c('region', 'month'))
```

-   Example 2

```{r dvs-7-2}
#Challenge 9 Q10

Aln_prop |> 
  kable(format = "html",
        digits = 3,
        col.names = 
          c("State", 
            "Alan", 
            "Allan",
            "Allen"),
        caption = "Proportions of Different Spellings of 'Allen' per State") |>
  kable_classic(html_font = "Ariel",
                font_size = 18) |>
  row_spec(0, bold = TRUE)
```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call

```{r pe-1-one-call}
#Lab 8 Step 3

sing_line <- function(dataset, line, phrase_col){
  num_word <- ordinal(line)
  intro <- glue::glue("On the {num_word} day of Christmas, my true love sent to me:")
  phrases <- dataset |>
    pull( {{phrase_col}} ) |>
    head(line) |>
    rev() |>
    str_c(collapse = ",\n")
  return(glue::glue("{intro}\n{phrases}.\n\n"))
}

xmas2 |>
sing_line(line = 2, phrase_col = Full.Phrase)
```

-   `across()`

```{r pe-1-across}
#Lab 7 Q5

rescale_column <- function(df, var) {
  df <- df |>
    mutate(across(.cols = {{var}},
                  .fns = ~rescale_01(.x)
                  )
           )
  return()
}
```

-   `map()` functions

```{r pe-1-map-1}
#Lab 8 Step 4

song_all <- map_chr(.x = 1:12,
        .f = ~sing_line(dataset = xmas2, 
                       line = .x,
                       phrase_col = Full.Phrase)
)
```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1

```{r pe2-1}
#Lab 8 Step 2

make_phrase <- function(day, num_word, item, verb, adjective, location) {
  verb <- str_replace_na(verb, "")
  adjective <- str_replace_na(adjective, "")
  location <- str_replace_na(location, "")
  if(day > 1) {
    item <- pluralize_gift(item)
    }
  else if(str_detect(item, pattern = "^[aeiou]")) {
    num_word = "an"
    } else {
      num_word = "a"
    }
  return(str_squish(glue("{num_word} {adjective} {item} {verb} {location}")))
}
```

-   Example 2

```{r pe2-2}
#Lab 7 Q3

rescale_01 <- function(x) {
  stopifnot(is.numeric(x))
  if(length(x) <= 1){
    stop("The length of the vector is not greater than 1")
  }
  vec_rescaled <- (x - min(x, na.rm = TRUE)) /
    (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
  return(head(vec_rescaled, 20))
}
```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r pe-3-across}
#Lab 7 Q5

rescale_column <- function(df, var) {
  df <- df |>
    mutate(across(.cols = {{var}},
                  .fns = ~rescale_01(.x)
                  )
           )
  return()
}
```

-   `map()` functions (Provide 2 Examples)

```{r pe-3-map-1}
#Lab 8 Step 4

song_all <- map_chr(.x = 1:12,
        .f = ~sing_line(dataset = xmas2, 
                       line = .x,
                       phrase_col = Full.Phrase)
)
```

```{r pe-3-map-2}
#Practice Activity 8 Step 2

xmas2 <- xmas |>
  mutate(
    num_word = as.character(english(Day)),
    Full.Phrase = pmap_chr(.l = list(
      day = Day, 
      num_word = num_word,
      item = Gift.Item, 
      verb = Verb, 
      adjective = Adjective, 
      location = Location), 
      .f = make_phrase)
         )

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   Example 1

```{r pe-4-1}
#Lab 4 Q7

avocado_cali_size <- avocado_cali |>
  select(c('Small_Medium',
           'Large', 
           'Extra Large', 
           'type', 
           'region')) |>
  pivot_longer(Small_Medium : `Extra Large`,
               names_to = "Size",
               values_to = "Volume") |>
  group_by(region, 
           Size,
           type) |>
  summarise(volume_sold = sum(Volume)) 
```

-   Example 2

```{r pe-4-2}
#Challenge 4

avocado_new <- avocado_clean |>
  semi_join(y = cali_regions, by = 'region') |>
  mutate('Avo_sales_USD' = AveragePrice * `Total Volume`,
         'Date' = as.Date(Date),
         'month' = floor_date(Date, 'month')) |>
  select(month, Avo_sales_USD, region) |>
  group_by(region, month) |>
  summarise(Avo_sales_USD = sum(Avo_sales_USD))

housing_prices <- housing_prices_og |>
  pivot_longer("2015-01-31" : "2018-03-31",
             names_to = "Date",
             values_to = "Avg_house_price") |>
  filter(State == "CA") |>
  mutate('region' =
           str_replace(RegionName,
                       " ", 
                       ""),
         'Date' = as.Date(Date),
         'month' = floor_date(Date, 'month')) |>
  select(region, month, Avg_house_price) |>
  right_join(cali_regions) |>
  drop_na() 

avo_house <- housing_prices |>
  full_join(avocado_new, by = c('region', 'month'))
```

## Data Simulation & Modeling

**DSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r dsm-1-1}
#Lab 9 Q3

allison_f_year <- allison_f |> 
  group_by(State) |>
  replace_na(list('Count' = 0)) |>
  select(Year, State, Count)

ggplot(data = allison_f_year, mapping = aes(x = Year, y = Count)) +
  geom_jitter(alpha = 0.3, color = 'tomato') +
  labs(title = "Number of Allisons in State over Time")
```

-   Example 2

```{r dsm-1-2}
#Practice Activity 9.2 Q3

my_model_2 <- penguins |>
  lm(bill_length_mm ~ bill_depth_mm*species, data = _)

penguins |>
  ggplot(aes(x = bill_depth_mm, y = bill_length_mm)) +
  geom_point(aes(color = species)) +
  stat_smooth(method = "lm") + 
  labs(x = "Bill Depth (mm)", 
       y = "Bill Length (mm)")
```

**DSM-2: I can fit a linear regression and extract necessary summary measures.**

-   Example 1

```{r dsm-2-1}
#Lab 9 Q4

allison_lm <- lm(Count ~ Year, data = allison_f)

#Lab 9 Q5

tidy(allison_lm)
```

-   Example 2

```{r dsm-2-2}
#Practice Activity 9.2 Q3

my_model <- penguins |>
  lm(bill_length_mm ~ bill_depth_mm, data = _)

broom::tidy(my_model)

broom::glance(my_model)
```

## Revising My Thinking

Every time I receive feedback on my assignments, I return to such assignment and look at the spots in which I can improve. So far, for the assignments I have had to revise, I completed them promptly and with intention. Additionally, after we do practice activities in groups, I often redo the assignment when I get home to see if I can complete the problems without help.

## Extending My Thinking

I make an effort to go above and beyond during my assignments by researching ways to make my data visualizations easier to read or using outside sources to optimize my code. An example of this is in Lab 4, I researched ways to use the Date datatype and its functions in order to make the rest of the assignment easier to follow and write code for. I also earned a token for my Lab 2 for using side-by-side boxplots with dodged axis labels and transparent jittered points when such elements were not required.

## Peer Support & Collaboration

![](images/image-398216622.png)

\
